#!/usr/bin/env python
# -*- coding: UTF-8 -*-
from signal import signal, SIGINT, SIGTERM
from time import sleep, time
from logging import getLogger, DEBUG, NullHandler, FileHandler
from includes import newconnection, rewiredInstance
from includes import rewireFunctions
from threading import Timer
from os import path
from sys import argv
import weakref
import npyscreen
import sys
import curses


class reWire(npyscreen.NPSAppManaged):
    def onStart(self):
        npyscreen.setTheme(npyscreen.Themes.ColorfulTheme)
        self.conID = 0
        self.servers = {}
        self.formIDs = []
        self.homepath = path.dirname(argv[0])
        self.config = rewireFunctions.load_config(self.homepath)
        self.version = rewireFunctions.gitVersion(path.join(self.homepath, 'includes'))
        self.appname = "re:wire"
        self.chooser = newconnection.NewConnection(self)
        self.registerForm("MAIN", self.chooser)
        self.timer = Timer(5, self.timerfired)
        self.timer.start()
        self.chooser.runAutoconnect()
        self.activeform = 0
        self.logger = getLogger('lib:re:wired')
        self.exceptlogger = getLogger('re:wire')
        self.exceptlogger.addHandler(FileHandler(path.join(self.homepath, 'exceptions.log')))
        self.handler = NullHandler()
        self.logger.addHandler(self.handler)

    def shutdown(self):
        for akey, aserver in self.servers.items():
            for aform in aserver.forms:
                aserver.closeForm(aform)
        if self.timer.is_alive():
            self.timer.cancel()
            if not self.timer.join(5):
                print "Failed to stop timer thread"
        return 1

    def removeConnection(self, conID):
        if conID in self.servers:
            del(self.servers[conID])
            return 1
        return 0

    def registerForm(self, f_id, fm):
        fm.parentApp = weakref.proxy(self)
        self._Forms[f_id] = fm
        self.formIDs.append(f_id)

    def removeForm(self, f_id):
        del self._Forms[f_id].parentApp
        del self._Forms[f_id]
        for i in range(0, len(self.formIDs)):
            try:
                if self.formIDs[i] == f_id:
                    self.formIDs.pop(i)
            except IndexError:
                pass

    def switchPrevForm(self, *args):
        if len(self.formIDs) <= 1:
            return 0
        key = 0
        for i in range(0, len(self.formIDs)):
            if self.formIDs[i] == self.activeform:
                key = i - 1
        if key < 0:
            key = len(self.formIDs) - 1
        self.switchForm(self.formIDs[key])

    def switchNextForm(self, *args):
        if len(self.formIDs) <= 1:
            return 0
        key = 0
        for i in range(0, len(self.formIDs)):
            if self.formIDs[i] == self.activeform:
                key = i + 1
        if key >= len(self.formIDs):
            key = 0
        self.switchForm(self.formIDs[key])

    def switchForm(self, fmid):
        self._THISFORM.editing = False
        self.setNextForm(fmid)
        self.switchFormNow()
        self.activeform = fmid

    def returnActiveForm(self):
        return self.activeform

    def applyCommandToAll(self, command):
        for akey, aserver in self.servers.items():
            aserver.checkCommand(command)
        return 1

    def timerfired(self):
        for aforid, aform in self._Forms.items():
            if hasattr(aform, "onTimer"):
                try:
                    aform.onTimer()
                except:
                    pass
        self.timer = Timer(5, self.timerfired)
        self.timer.start()

sys.excepthook = rewireFunctions.handleException
app = reWire()
app.run()
